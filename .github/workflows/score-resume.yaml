name: Score Resume

on:
  workflow_dispatch:
    inputs:
      resume_repository:
        description: The repository containing the resume to be scored.
        required: true
        default: dev-dull/resume
      resume_path:
        description: The path to the resume file to be scored.
        required: true
        default: resume_details.yaml
      job_description_path:
        description: The path to the job description file to be scored.
        required: true
        default: job.txt
      branch:
        description: The branch to use for the resume repository.
        required: true
        default: main
      career_growth_keywords:
        description: The keywords to look for in the job description that will help grow the candidates career in the desired direction
        required: true
        default: Remote Senior DevOps Kubernetes Docker Terraform Vault Ansible Linux

jobs:
  score_resume:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.resume_repository }}
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.REPO_TOKEN }}

      - name: Supress personal information (no-op)
        # GitHub Actions only hides secrets that are referenced in the workflow file.
        # This is a no-op step to ensure that the secrets are not exposed in the logs.
        shell: bash
        run: |
          # ${{secrets.ADDRESS}}
          # ${{secrets.EMAIL}}
          # ${{secrets.PHONE}}

      - name: Set Resume, Job Description Text
        uses: actions/github-script@v7
        env:
          RESUME_PATH: ${{ github.event.inputs.resume_path }}
          JOB_DESCRIPTION_PATH: ${{ github.event.inputs.job_description_path }}
        with:
          script: |
            const fs = require('fs')

            const resumeText = fs.readFileSync(process.env.RESUME_PATH, 'utf8')
            core.exportVariable('RESUME_TEXT', resumeText)

            const jobText = fs.readFileSync(process.env.JOB_DESCRIPTION_PATH, 'utf8')
            core.exportVariable('JOB_DESCRIPTION_TEXT', jobText)

      - name: Run gemini-qualified action
        id: gemini-check
        uses: dev-dull/job-search-automations/gemini-qualified@v0.1.3
        with:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GEMINI_MODEL: gemini-2.0-flash
          RESUME_TEXT: ${{ env.RESUME_TEXT }}
          JOB_DESCRIPTION: ${{ env.JOB_DESCRIPTION_TEXT }}
          CAREER_GROWTH_KEYWORDS: input.career_growth_keywords

      - name: Print Gemini Score
        uses: actions/github-script@v7
        env:
          RAW: ${{ steps.gemini-check.outputs.RAW }}
          RESPONSE_TEXT: ${{ steps.gemini-check.outputs.RESPONSE_TEXT }}
        with:
          script: |
            try {
              const response = JSON.parse(process.env.RESPONSE_TEXT);

              core.summary
                .addHeading('About The Candidate')
                .addHeading('Candidate Score:', 2)
                .addRaw(response.candidate_score)
                .addHeading('Career Growth Score:', 2)
                .addRaw(response.career_growth_score)
                .addHeading('Candidate Explanation', 2)
                .addRaw(response.candidate_explanation)
                .addHeading('Candidate Deficiencies', 2)
                .addList(response.candidate_deficiencies)
                .addHeading('Candidate Strengths', 2)
                .addList(response.candidate_strengths)
                .addHeading('Candidate Recommendations', 2)
                .addList(response.candidate_recommendations)
                .addHeading('Resume Errors', 2)
                .addList(response.candidate_errors)
                .addHeading('About The Job')
                .addHeading('Job Description Score:', 2)
                .addRaw(response.job_description_score)
                .addHeading('Job Description Explanation', 2)
                .addRaw(response.job_description_explanation)
                .addHeading('Job Description Deficiencies', 2)
                .addList(response.job_description_deficiencies)
                .addHeading(`About ${response.job_company_name}`)
                .addHeading('Job Company Description', 2)
                .addRaw(response.job_company_description)
                .addHeading('Company Sentiment Score:', 2)
                .addRaw(response.job_company_sentiment_score)
                .addHeading('Company Sentiment Score Explanation', 2)
                .addRaw(response.job_company_explanation)
                .write()
            } catch (error) {
              core.summary
                .addCodeBlock(process.env.RESPONSE_TEXT)
                .addError(error.message)
                .write()
              core.setFailed(`Error parsing JSON response: ${error.message}`);
            }
