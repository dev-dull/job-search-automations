name: Create Outline for Cover Letter (Gemini)
description: Use Google Gemini to create an outline for a cover letter based on a resume and job description.

inputs:
  GOOGLE_API_KEY:
    description: Google API Key For Gemini
    required: true
  GEMINI_MODEL:
    description: Gemini Model
    required: true
    # The name says 'preview' but is publicly displayed as 'Gemini 2.5 Flash'
    default: gemini-2.5-flash-preview-05-20
  RESUME_TEXT:
    description: Resume Text
    required: true
  RESUME_MIME_TYPE:
    description: Resume Mime Type
    required: true
    default: text/html
  JOB_DESCRIPTION:
    description: Job Description
    required: true
  JOB_DESCRIPTION_MIME_TYPE:
    description: Job Description Mime Type
    required: true
    default: text/plain
  COMPANY_CAREER_INFO:
    description: Text found on the company's websites that describes the company culture, values, mission, and any other details provided on the Company's website which they present to prospective candidates
    required: true
    default: text/plain
  COMPANY_CAREER_INFO_MIME_TYPE:
    description: Company career info mime type
    required: true
    default: text/plain
  PERSONA:
    description: The persona to use for the system instruction. This is used to set the tone and style of the response.
    required: true
    default: Act as an expert technical recruiter with a previous career in software engineering who can critically compare resumes to job descriptions to help a candidate write a cover letter.

outputs:
  RAW:
    description: The raw response generated by Gemini.
    value: ${{ steps.gemini-check.outputs.RAW }}
  RESPONSE_TEXT:
    description: 'The text response generated by Gemini which was instructed to output JSON with they keys: introduction_help, outline, conclusion_help, additional_help.'
    value: ${{ steps.gemini-check.outputs.RESPONSE_TEXT }}

runs:
  using: composite
  steps:
    - name: Compare Candidate Qualifications for Cover Letter Outline
      id: gemini-check
      uses: actions/github-script@v7
      env:
        GOOGLE_API_KEY: ${{ inputs.GOOGLE_API_KEY }}
        GEMINI_MODEL: ${{ inputs.GEMINI_MODEL }}
        RESUME_MIME_TYPE: ${{ inputs.RESUME_MIME_TYPE }}
        RESUME_TEXT: ${{ inputs.RESUME_TEXT }}
        JOB_DESCRIPTION_MIME_TYPE: ${{ inputs.JOB_DESCRIPTION_MIME_TYPE }}
        JOB_DESCRIPTION: ${{ inputs.JOB_DESCRIPTION }}
        COMPANY_CAREER_INFO_MIME_TYPE: ${{ inputs.COMPANY_CAREER_INFO_MIME_TYPE }}
        COMPANY_CAREER_INFO: ${{ inputs.COMPANY_CAREER_INFO }}
        PERSONA: ${{ inputs.PERSONA }}
      with:
        script: |
          const payload = {
            system_instruction: {
              parts: {
                text: process.env.PERSONA
              }
            },
            contents: [
              {
                parts: [
                  {
                    text: `Compare the resume, the job description, and the company career page information with the goal of helping the candidate write a cover letter by suggesting an outline for the letter. Provide a JSON formatted response containing the following key/value pairs:
                    - introduction_help: a short paragraph to help the candidate write an introduction to the cover letter that includes some suggested phrasing that will help the candidate get started with a friendly and professional tone.
                    - outline: a list of brief descriptions of what to include in the cover letter. Be sure to incorporate the company career information provided in the input.
                    - conclusion_help: a short paragraph to help the candidate write a conclusion to the cover letter that includes some suggested phrasing that will help the candidate finish the letter with a friendly and professional tone.
                    - additional_help: a short paragraph to help the candidate write a cover letter that includes some suggested phrasing that will help the candidate finish the letter with a friendly and professional tone.

                    The JSON should be valid, parsable, use 2 spaces for indentation, and contain no additional formatting or comments.`
                  },
                  {
                    inline_data: {
                      mime_type: process.env.RESUME_MIME_TYPE,
                      data: Buffer.from(process.env.RESUME_TEXT).toString('base64')
                    }
                  },
                  {
                    inline_data: {
                      mime_type: process.env.JOB_DESCRIPTION_MIME_TYPE,
                      data: Buffer.from(process.env.JOB_DESCRIPTION).toString('base64')
                    }
                  },
                  {
                    inline_data: {
                      mime_type: process.env.COMPANY_CAREER_INFO_MIME_TYPE,
                      data: Buffer.from(process.env.COMPANY_CAREER_INFO).toString('base64')
                    }
                  }

                ]
              }
            ]
          };

          const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${process.env.GEMINI_MODEL}:generateContent?key=${process.env.GOOGLE_API_KEY}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
          });

          const data = await response.json();
          console.log('Gemini response:', JSON.stringify(data, null, 2));
          let resultText = data.candidates[0].content.parts[0].text;
          resultText = resultText.replace(/```json|```/g, '').trim();

          core.setOutput('RAW', JSON.stringify(data, null, 2));
          core.setOutput('RESPONSE_TEXT', resultText);
