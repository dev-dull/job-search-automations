name: Suggest Resume Changes (Gemini)
description: Use Google Gemini to suggest changes to a resume based on a provided job description.

inputs:
  GOOGLE_API_KEY:
    description: Google API Key For Gemini
    required: true
  GEMINI_MODEL:
    description: Gemini Model
    required: true
    default: gemini-2.0-flash
  RESUME_TEXT:
    description: Resume Text
    required: true
  RESUME_MIME_TYPE:
    description: Resume Mime Type
    required: true
    default: text/plain
  JOB_DESCRIPTION:
    description: Job Description
    required: true
  JOB_DESCRIPTION_MIME_TYPE:
    description: Job Description Mime Type
    required: true
    default: text/plain
  PERSONA:
    description: The persona to use for the system instruction. This is used to set the tone and style of the response.
    required: true
    default: Act as an expert technical recruiter with a previous career in software engineering who can critically compare resumes to job descriptions to help a candidate tailor their resume to the open position.

outputs:
  RAW:
    description: The raw response generated by Gemini.
    value: ${{ steps.gemini-check.outputs.RAW }}
  RESPONSE_TEXT:
    description: 'The text response generated by Gemini which was instructed to output JSON with they keys: score, explanation, deficiencies, strengths, and recommendations.'
    value: ${{ steps.gemini-check.outputs.RESPONSE_TEXT }}

runs:
  using: composite
  steps:
    - name: Query Resume Suggestions
      id: gemini-check
      uses: actions/github-script@v7
      env:
        GOOGLE_API_KEY: ${{ inputs.GOOGLE_API_KEY }}
        GEMINI_MODEL: ${{ inputs.GEMINI_MODEL }}
        RESUME_MIME_TYPE: ${{ inputs.RESUME_MIME_TYPE }}
        RESUME_TEXT: ${{ inputs.RESUME_TEXT }}
        JOB_DESCRIPTION_MIME_TYPE: ${{ inputs.JOB_DESCRIPTION_MIME_TYPE }}
        JOB_DESCRIPTION: ${{ inputs.JOB_DESCRIPTION }}
        PERSONA: ${{ inputs.PERSONA }}
      with:
        script: |
          const payload = {
            system_instruction: {
              parts: {
                text: process.env.PERSONA
              }
            },
            contents: [
              {
                parts: [
                  {
                    text: `Compare the resume, the job description with the goal of helping the candidate tailor their resume to the open position. Provide a JSON formatted response containing a list of maps. There is one map in the list for each position the candidate has held. Each map contains the following key/value pairs:
                    - company_name: The name of the company where the candidate has worked.
                    - position_name: The name of the position held by the candidate.
                    - remove: Make a determination if the position should be removed from the resume entirely based on its relevance to the job description. If it is not relevant, set this to true, otherwise false.
                    - add_emphasis: A brief paragraph of the experience the candidate has from this position and should emphasize when applying to this role.
                    - remove_emphasis: A brief paragraph of the experience the candidate has from this position that may not be relevant to the job they are applying for and should be deemphasized or removed in the resume.
                    - errors: a list of spelling and grammar errors in the resume. If none are found, set the list to a single result that says "No errors found."
                    - suggested_wording: A list of specific wording the candidate should use to better align their resume with the job description. This should include keywords and phrases from the job description that are relevant to the candidate's experience.
                    - additional_help: Any additional suggestions for the candidate to consider when tailoring their resume for this position.

                    The JSON should be valid, parsable, use 2 spaces for indentation, and contain no additional formatting or comments.`
                  },
                  {
                    inline_data: {
                      mime_type: process.env.RESUME_MIME_TYPE,
                      data: Buffer.from(process.env.RESUME_TEXT).toString('base64')
                    }
                  },
                  {
                    inline_data: {
                      mime_type: process.env.JOB_DESCRIPTION_MIME_TYPE,
                      data: Buffer.from(process.env.JOB_DESCRIPTION).toString('base64')
                    }
                  }
                ]
              }
            ]
          };

          const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${process.env.GEMINI_MODEL}:generateContent?key=${process.env.GOOGLE_API_KEY}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
          });

          const data = await response.json();
          console.log('Gemini response:', JSON.stringify(data, null, 2));
          let resultText = data.candidates[0].content.parts[0].text;
          resultText = resultText.replace(/```json|```/g, '').trim();

          core.setOutput('RAW', JSON.stringify(data, null, 2));
          core.setOutput('RESPONSE_TEXT', resultText);
