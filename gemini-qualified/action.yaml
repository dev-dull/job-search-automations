name: Check Candidate Qualification (Gemini)
description: Use Google Gemini to evaluate if a candidate is qualified for a job based on their resume and the job description.

inputs:
  GOOGLE_API_KEY:
    description: Google API Key For Gemini
    required: true
  GEMINI_MODEL:
    description: Gemini Model
    required: true
    default: gemini-2.0-flash
  RESUME_TEXT:
    description: Resume Text
    required: true
  RESUME_MIME_TYPE:
    description: Resume Mime Type
    required: true
    default: text/plain
  CAREER_GROWTH_KEYWORDS:
    description: Words to look for in the job description that will help grow the candidate's career in the desired direction.
    required: true
  JOB_DESCRIPTION:
    description: Job Description
    required: true
  JOB_DESCRIPTION_MIME_TYPE:
    description: Job Description Mime Type
    required: true
    default: text/plain
  PERSONA:
    description: The persona to use for the system instruction. This is used to set the tone and style of the response.
    required: true
    default: Act as an expert technical recruiter with a previous career in software engineering who can crtically compare resumes to job descriptions to determine if a candidate is a fit for a role.

outputs:
  RAW:
    description: The raw response generated by Gemini.
    value: ${{ steps.gemini-check.outputs.RAW }}
  RESPONSE_TEXT:
    description: 'The text response generated by Gemini which was instructed to output JSON with they keys: score, explanation, deficiencies, strengths, and recommendations.'
    value: ${{ steps.gemini-check.outputs.RESPONSE_TEXT }}

runs:
  using: composite
  steps:
    - name: Query Candidate Qualification
      id: gemini-check
      uses: actions/github-script@v7
      env:
        GOOGLE_API_KEY: ${{ inputs.GOOGLE_API_KEY }}
        GEMINI_MODEL: ${{ inputs.GEMINI_MODEL }}
        RESUME_MIME_TYPE: ${{ inputs.RESUME_MIME_TYPE }}
        RESUME_TEXT: ${{ inputs.RESUME_TEXT }}
        CAREER_GROWTH_KEYWORDS: ${{ inputs.CAREER_GROWTH_KEYWORDS }}
        JOB_DESCRIPTION_MIME_TYPE: ${{ inputs.JOB_DESCRIPTION_MIME_TYPE }}
        JOB_DESCRIPTION: ${{ inputs.JOB_DESCRIPTION }}
        PERSONA: ${{ inputs.PERSONA }}
      with:
        script: |
          const payload = {
            system_instruction: {
              parts: {
                text: process.env.PERSONA
              }
            },
            contents: [
              {
                parts: [
                  {
                    text: `Compare the resume and job description and provide a JSON formatted response containing the following key/value pairs:
                    - candidate_score: a score between 1 and 100 for how well the resume matches the job description.
                    - career_growth_score: a score between 1 and 100 for words in the job description that are similar to the following: ${process.env.CAREER_GROWTH_KEYWORDS}
                    - candidate_explanation: an explanation of the score no longer than 250 words.
                    - candidate_deficiencies: a list of deficiencies in the resume that the candidate likely possesses, but could be better highlighted in the resume.
                    - candidate_strengths: a list of strengths in the resume that the candidate possesses.
                    - candidate_recommendations: a list of specific changes that the candidate should make to their resume to improve their chances of getting the job.
                    - candidate_errors: a list of spelling and grammar errors in the resume.
                    - job_description_score: a score between 1 and 100 for how well the job description is written.
                    - job_description_explanation: an explanation of the job_description_score no longer than 250 words.
                    - job_description_deficiencies: a list of deficiencies in the job description that the candidate should be aware of.
                    - job_company_name: from the job description, identify the company name.
                    - job_company_description: describe the company named in job_company_name in no more than 50 words.
                    - job_company_sentiment_score: without referencing the job description or resume, provide a score between 1 and 100 for how well the company is likely to treat its employees.
                    - job_company_explanation: without referencing the job description or resume, write an explanation of job_company_sentiment_score no longer than 250 words.

                    The JSON should be valid, parsable, use 2 spaces for indentation, and contain no additional formatting or comments.`
                  },
                  {
                    inline_data: {
                      mime_type: process.env.RESUME_MIME_TYPE,
                      data: Buffer.from(process.env.RESUME_TEXT).toString('base64')
                    }
                  },
                  {
                    inline_data: {
                      mime_type: process.env.JOB_DESCRIPTION_MIME_TYPE,
                      data: Buffer.from(process.env.JOB_DESCRIPTION).toString('base64')
                    }
                  }
                ]
              }
            ]
          };

          const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${process.env.GEMINI_MODEL}:generateContent?key=${process.env.GOOGLE_API_KEY}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
          });

          const data = await response.json();
          let resultText = data.candidates[0].content.parts[0].text;
          resultText = resultText.replace(/```json|```/g, '').trim();

          console.log('Gemini response:', resultText);

          core.setOutput('RAW', JSON.stringify(data, null, 2));
          core.setOutput('RESPONSE_TEXT', resultText);
