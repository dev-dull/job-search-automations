name: Check Resume One Last Time (Gemini)
description: Use Google Gemini to review a resume to validate it is ready to be used in a job application.

inputs:
  GOOGLE_API_KEY:
    description: Google API Key For Gemini
    required: true
  GEMINI_MODEL:
    description: Gemini Model
    required: true
    # The name says 'preview' but is publicly displayed as 'Gemini 2.5 Flash'
    default: gemini-2.5-flash-preview-05-20
  RESUME_FILENAME:
    # [ TODO: issue #12 ] This is the only action that has a filename input.
    description: Resume Filename
    required: true
  RESUME_MIME_TYPE:
    description: Resume Mime Type
    required: true
    default: application/pdf
  PERSONA:
    description: The persona to use for the system instruction. This is used to set the tone and style of the response.
    required: true
    default: Act as an expert technical recruiter with a previous career in software engineering who can critically review a resume to identify errors and omissions before the candidate applies to an open position.

outputs:
  RAW:
    description: The raw response generated by Gemini.
    value: ${{ steps.gemini-check.outputs.RAW }}
  RESPONSE_TEXT:
    description: 'The text response generated by Gemini which was instructed to output JSON with they keys: score, explanation, deficiencies, strengths, and recommendations.'
    value: ${{ steps.gemini-check.outputs.RESPONSE_TEXT }}

runs:
  using: composite
  steps:
    - name: Query Candidate Qualification
      id: gemini-check
      uses: actions/github-script@v7
      env:
        GOOGLE_API_KEY: ${{ inputs.GOOGLE_API_KEY }}
        GEMINI_MODEL: ${{ inputs.GEMINI_MODEL }}
        RESUME_MIME_TYPE: ${{ inputs.RESUME_MIME_TYPE }}
        RESUME_FILENAME: ${{ inputs.RESUME_FILENAME }}
        PERSONA: ${{ inputs.PERSONA }}
      with:
        script: |
          const fs = require('fs')

          const resumeContent = fs.readFileSync(process.env.RESUME_FILENAME).toString('base64');
          console.log(resumeContent);
          const payload = {
            system_instruction: {
              parts: {
                text: process.env.PERSONA
              }
            },
            contents: [
              {
                parts: [
                  {
                    text: `Review the resume with the goal of providing a final review before the candidate submits their application to an open position. Provide a JSON formatted response containing the following key/value pairs:
                    - errors: a list of spelling and grammar errors in the resume. If none are found, set the list to a single result that says "No errors found."
                    - ats_score: a score between 1 and 100 on if the formatting appears to be simple enough for an Applicant Tracking System (ATS) to parse.
                    - ats_explanation: an explanation of the score no longer than 250 words.
                    - ats_recommendations: a list of specific changes that the candidate should make to their resume to improve their chances of passing an ATS.
                    - conciseness_recommendations: a list of specific changes that the candidate should make to their resume to improve its conciseness.

                    The JSON should be valid, parsable, use 2 spaces for indentation, and contain no additional formatting or comments.`
                  },
                  {
                    inline_data: {
                      mime_type: process.env.RESUME_MIME_TYPE,
                      data: resumeContent
                    }
                  }
                ]
              }
            ]
          };

          const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${process.env.GEMINI_MODEL}:generateContent?key=${process.env.GOOGLE_API_KEY}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
          });

          const data = await response.json();
          console.log('Gemini response:', JSON.stringify(data, null, 2));
          let resultText = data.candidates[0].content.parts[0].text;
          resultText = resultText.replace(/```json|```/g, '').trim();

          core.setOutput('RAW', JSON.stringify(data, null, 2));
          core.setOutput('RESPONSE_TEXT', resultText);
